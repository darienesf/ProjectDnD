package ProjectDND;

import java.util.*;
/*
import javax.swing.JFrame;
import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Component;
import java.awt.Dimension;
*/
import java.text.DateFormat;
import java.text.SimpleDateFormat;


@SuppressWarnings("unused")

public class socialExperiment{
	
	static Scanner keyboard = new Scanner(System.in);
	static String[] inventory = new String[9];
	static Player1 Hero = new Player1();
	
	private static void dungeon()
	{
		 //System objects
	      Scanner in = new Scanner(System.in);
	      Random rand = new Random();
	      int bosscount = 0;
	      
	      //Enemy variables
	      String enemies[] = {"Skeleton", "Zombie", "Assassin", "Warrior", "Lizard", "Dragon"};
	      int maxEnemyHealth = 75;
	      int enemyAttackDamage = 25;
	      
	      //Player variables
	      int health = 100;
	      int attackDamage = 50;
	      int numHealthPotions = 3;
	      int healthPotionHealAmount = 30;
	      int healthPotionDropChance = 50; //Percent chance of adding potion to inventory
	      
	      boolean running = true;
	      
	      //INTRO
	      System.out.println("------------------------------WELCOME TO THE DUNGEON!-----------------------------");
	      System.out.println(" _ .-') _                  .-') _             ('-.                    .-') _,---. ");
	      System.out.println("( (  OO) )                ( OO ) )          _(  OO)                  ( OO ) )   | ");
	      System.out.println(" \\     .'_ ,--. ,--.  ,--./ ,--,' ,----.   (,------. .-'),-----. ,--./ ,--,'|   | ");
	      System.out.println(" ,`'--..._)|  | |  |  |   \\ |  |\\'  .-./-') |  .---'( OO'  .-.  '|   \\ |  |\\|   | ");
	      System.out.println(" |  |  \\  '|  | | .-')|    \\|  | )  |_( O- )|  |    /   |  | |  ||    \\|  | )   | ");
	      System.out.println(" |  |   ' ||  |_|( OO )  .     |/|  | .--, (|  '--. \\_) |  |\\|  ||  .     |/|  .' ");
	      System.out.println(" |  |   / :|  | | `-' /  |\\    |(|  | '. (_/|  .--'   \\ |  | |  ||  |\\    | `--'  ");
	      System.out.println(" |  '--'  ('  '-'(_.-'|  | \\   | |  '--'  | |  `---.   `'  '-'  '|  | \\   | .--.  ");
	      System.out.println(" `-------'  `-----'   `--'  `--'  `------'  `------'     `-----' `--'  `--' '--'  ");
	           
	      GAME:
	      while (running) {
	       System.out.println("----------------------------------------------------------------------------------");
	       
	       int enemyHealth = rand.nextInt(maxEnemyHealth);
	       int l = enemies.length;
	       String enemy = enemies[rand.nextInt(l)];
	       System.out.println("\t# " + enemy + " has appeared! #\n");
	       
	       while (enemyHealth > 0) {
	        System.out.println();
	        System.out.println("\tYour HP: " + health);
	        System.out.println("\t" + enemy + "'s HP: " + enemyHealth);
	        System.out.println("\n\tWhat would you like to do?");
	        System.out.println("\t1. Attack Enemy! --{>>>>>"
	        		+ "\n\t2. Drink Potion! {&}"
	        		+ "\n\t3. Run Away! <---"); 

	        int input = in.nextInt();
	        if (input == 1) {
	         int damageDealt = rand.nextInt(attackDamage);
	         int damageTaken = rand.nextInt(enemyAttackDamage);
	         
	        //Tallies remaining HP for enemy and player 
	         enemyHealth -= damageDealt;
	         health -= damageTaken;
	         
	         System.out.println("\t>You strike the " + enemy + " for " + damageDealt + " damage.");
	         System.out.println("\t>You recieve " + damageTaken + " from the " + enemy + ".");
	         in.nextLine();
	        
	         if (health < 1) {
	          System.out.println( "\t>You have taken a significant amount of damage!");
	          break;
	          
	         }
	        }
	        else if (input == 2) {
	         if (numHealthPotions > 0) {
	          health += healthPotionHealAmount;
	          numHealthPotions--;
	          System.out.println("\t> You drink a potion.");
	          System.out.println();
	          System.out.println("\t> You now have " + health + " HP." );
	          System.out.println();
	          System.out.println("\t> You have " + numHealthPotions + " potion(s) remaining." );
	          System.out.println();
	         }
	         else {
	          System.out.println( "\t> You have run out of potions!" );
	         }
	        }
	        else if (input == 3) {
	         System.out.println("\t>You run away from the " + enemy + "!" );
	         continue GAME;
	        }
	        else {
	         System.out.println("\t>Invalid command!" );
	        }
	        
	       }
	       if (health < 1) {
	        System.out.println("YOU DIED");
	        
	        break;
	       }
	       
	       System.out.println( "----------------------------------------------------------------------------------");
	       System.out.println( " # The " + enemy + " was defeated! # " );
	       System.out.println( " # You have " + health + " HP left. #" );
	       if (rand.nextInt(100) < healthPotionDropChance) {
	        numHealthPotions++;
	        System.out.println( " # The " + enemy + " drops a potion! #" );
	        System.out.println( " # You have " + numHealthPotions + " potion(s) in your pouch. #" );
	       }
	       System.out.println( "----------------------------------------------------------------------------------" );
	       System.out.println( "Would you like to continue further into the dungeon?" );
	       System.out.println( "1. Yes!" );
	       System.out.println( "2. No..." );
	       
	       int input = in.nextInt();
	       
	       while (input != 1 && input != 2) {
	        System.out.println( "Invalid command!" );
	        input = in.nextInt();
	       }
	       if (input == 1) {
	        System.out.println( "You continue onward into the unknown!" );
	        bosscount++;
	       }
	       else if (input == 2) {
	        System.out.println();
	        System.out.println( "Return when you feel ready..." );
	        System.out.println();
	        break;
	        
	       }
	      }
	      in.close();
	      System.out.println( "#########################");
	      System.out.println("# THANK YOU FOR PLAYING #");
	      System.out.println("#########################" );
	      
	     }
	    
	public static void save()
	{
		System.out.println("...Successful");
	}
	public static void exit()
	{
		System.out.println("Exit Successful");
	}
	
	public static void seperator()
	{
		System.out.println("-----------------------------------------");
	}
	
	public static void timeDisplay()
	{
		DateFormat df = new SimpleDateFormat("HH:mm:ss");
		Date dobj = new Date();
		System.out.println(df.format(dobj));
	}
	
	//In-Game commands 
	public static void commandMenu()
	{
		Scanner cmdIn = new Scanner(System.in);
		String cmd;
		boolean cmdPrompt = true;
		
		COMMANDS:
			while(cmdPrompt)
			{
				System.out.print("\\[cmdmod]");
				cmd = cmdIn.nextLine();
				
				switch(cmd)
				{
				case "sudo apt init wakeup":
					wipe();
					break;
					
				case "save":
					//saveData();
					System.out.println("Data Save Successful!"); 
					continue COMMANDS;
					
				case "load":
					System.out.println("Loading User Data...");
					//loadData();
					continue COMMANDS;
					
				case "inventory":
					System.out.println(inventory[0]);
					System.out.print(" is in your inventory");
					continue COMMANDS;
					
				case "install":
					//Player1.major();
					System.out.println("Unlock Neural Nodes to install upgrades...");
					continue COMMANDS;
					
				case "help":
					System.err.println("[Commands List]"
							+ "\n<save>"
							+ "\n<load>"
							+ "\n<inventory>"
							+ "\n<install>"
							+ "\nHINT: Type in commands without arrowheads");
					continue COMMANDS;
				
				case "exit":
					cmdIn.close();
					exit();
					break;
				} //switch cmd
				
				break;
			} //while cmdPrompt
	} //commandMenu()
	
	public static void wipe()
	{
		Scanner wipeIn = new Scanner(System.in);
				System.out.println("Voice: Wait, how do you know that...?");
				
				String wipe = wipeIn.nextLine();
				switch(wipe)
				{
				case "idk":
					System.out.println("Voice: I'll destroy you!");
					System.err.println("Ending simulation before completion will result in full cerebral crash.");
					
					seperator();
					
					System.out.println("Voice: Are you sure you want to do this?");
					System.err.println("Wake up? [Y/N]");
					String again = wipeIn.nextLine();
					switch(again.toUpperCase())
					{
					case "Y":
						System.err.println("Simulation Error(user_conscious-4011"
								+ "\nExectute full system wipe...\n");
						seperator();
						wipeIn.nextLine();
						System.err.println("System wipe COMPLETE!");
						break;
					}
					
					break;
				
				case "nunya":
				break;	
				}
				
				wipeIn.close();
			}
	
	public static void login()
	{
		Scanner userIn = new Scanner(System.in);
		String username;
		boolean login = true;
		String[] userData = new String[10];
		
		System.out.println("Voice: \nWelcome!!"
				+ "\nYou are now in the Social Experiment.");
		System.err.println("You are not familiar... "
				+ "\n Is this your first visit?"
				+ "[Y/N]");
		String firstvisit = userIn.nextLine();
		
		LOGIN:
			while(login)
			{			
				switch(firstvisit.toUpperCase())
				{
				case "Y":
					System.err.println("Please create a new username, any amount of characters as desired.");
					String newuser = userIn.nextLine();
					userData[0] = newuser;
					save();
					System.err.println("You will now be identified as, " + userData[0] + " in the Social Experiment Network.");
					firstvisit = "N";
					continue LOGIN;
				
				case "N":
					System.err.println("Please enter 'login'.");
					username = userIn.nextLine();
					switch(username)
					{
					case "login":
						System.err.println("Welcome back, " + userData[0]);
						//easier saving of data?
						break;
						
					case "anonymous":
						break;
						
					case "guest":
						break;
					
					case "admin":
						//breaks game
						break;
					
					case "cmd":
						commandMenu();
					} //username switch
					break;
				} //firstvisit switch
				userIn.close();
				break;
				}
			}//login while loop
	 //login();
	
	public static void userDataInput()
	{
		/*
		 * Before being able to have the full Social Experiment Experience
		 * you must answer a small questionare 
		*/
		
		Scanner enter = new Scanner(System.in);
		boolean beginning = true;
		
		//Player vars
		String gender;
		String name;
		int age;
		String major;
		
		System.out.println("Loading Questionnaire");
		
		QUESTIONS:
		while(beginning)
		{
			System.out.println("Are you male or female?"
					+ "\nNote: If you wish to not identify, simply press Enter.");
			gender = enter.nextLine();
			
			System.out.println("What is your name?");
			name = enter.next();
			
			System.out.println("How old are you?");
			age = enter.nextInt();
			
			System.out.println("What is your field of study?"
					+ "\n>Please use the abbrevation for the options below...");
			seperator();
			System.out.println("-Computer Science = CS"
					+ "\n-Business = BUS"
					+ "\n-Economics = ECO"
					+ "\n-Physical Therapy = ATH"
					+ "\n-Nursing = NUR"
					+ "\n-Biology = BIO"
					+ "\n-Politics = POL");
			
			major = enter.next();
			Player1 enigma = new Player1(gender, name, age, major);
			Hero = enigma;
			
			System.out.println(">Below are your current stats.");
			Hero.major();
			seperator();
			System.out.println("Voice: Quickly now...");
			Hero.PrintInfo();
			
			System.out.println("Is this information correct?"
					+ "\n[Y/N]?");
			String confrmInfo = enter.next();
			switch(confrmInfo.toUpperCase())
			{
			case "Y":
				System.out.println("Thank you for answering the quesitons with honesty!");
				enter.close();
				break;
			
			case "N":
				System.err.println("Please enter your correct information!");
				continue QUESTIONS;
			} //confirmInfo switch
			
		} //while questions
		
	} //userDataInput method
		
		public static void main(String[] args)
		{	
			System.out.println("Login to Social Experiment Network?"
					+ "\n[Y/N]");
			String login = keyboard.nextLine();
			
			switch(login.toUpperCase())
			{
			case "Y":
				System.err.println("Loading login...");
				login();
				userDataInput();
				//dream();
				break;
			
			case "N":
				System.out.println("No login...");
				keyboard.nextLine();
				dungeon();
				break;
			
			case "cmd":
				commandMenu();
				break;
			} //login switch
			
		}
}
	
